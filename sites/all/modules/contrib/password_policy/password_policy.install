<?php

/**
 * @file
 * Password Policy module installation and upgrade code.
 */

/**
 * Implements hook_schema().
 */
function password_policy_schema() {
  return array(
    'password_policy' => array(
      'description' => "Stores password policies.",
      'fields' => array(
        'pid' => array(
          'description' => "Primary Key: Unique password policy ID.",
          'type' => 'serial',
          'not null' => TRUE,
        ),
        'name' => array(
          'description' => "The name of the policy.",
          'type' => 'varchar',
          'length' => 64,
          'not null' => TRUE,
          'default' => '',
        ),
        'description' => array(
          'description' => "The description of the policy.",
          'type' => 'varchar',
          'length' => 255,
          'default' => '',
        ),
        'enabled' => array(
          'description' => "Whether the policy is enabled.",
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
          'size' => 'tiny',
        ),
        'policy' => array(
          'description' => "The policy's serialized data.",
          'type' => 'varchar',
          'length' => 1024,
          'not null' => TRUE,
          'default' => '',
          'serialize' => TRUE,
        ),
        'created' => array(
          'description' => "Timestamp for when the policy was created.",
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'expiration' => array(
          'description' => "The passwords will expire after this number of days.",
          'type' => 'int',
          'default' => 0,
        ),
        'warning' => array(
          'description' => "Comma separated list of days when warning is sent out.",
          'type' => 'varchar',
          'length' => 64,
        ),
        'weight' => array(
          'description' => "Weight of the policy, used to order active policies.",
          'type' => 'int',
          'size' => 'tiny',
          'not null' => TRUE,
          'default'  => 0,
        ),
      ),
      'primary key' => array('pid'),
      'unique keys' => array(
        'name' => array('name'),
      ),
    ),
    'password_policy_history' => array(
      'description' => "Stores users' old password hashes.",
      'fields' => array(
        'pid' => array(
          'description' => "Primary Key: Unique password policy users ID.",
          'type' => 'serial',
          'not null' => TRUE,
        ),
        'uid' => array(
          'description' => "User's {users}.uid.",
          'type' => 'int',
          'not null' => TRUE,
        ),
        'pass' => array(
          'type' => 'varchar',
          'length' => 128,
          'not null' => TRUE,
          'default' => '',
          'description' => "User's password (hashed).",
        ),
        'created' => array(
          'description' => "Timestamp for when the policy was created.",
          'type' => 'int',
          'not null' => TRUE,
        ),
      ),
      'foreign keys' => array(
        'password_policy' => array(
          'table' => 'password_policy',
          'columns' => array('pid' => 'pid'),
        ),
        'user' => array(
          'table' => 'users',
          'columns' => array('uid' => 'uid'),
        ),
      ),
      'indexes' => array('uid' => array('uid')),
      'primary key' => array('pid'),
    ),
    'password_policy_expiration' => array(
      'description' => 'Stores users password expiration data.',
      'fields' => array(
        'pid' => array(
          'description' => "Primary Key: Unique password policy expirations ID.",
          'type' => 'serial',
          'not null' => TRUE,
        ),
        'uid' => array(
          'description' => "User's {users}.uid.",
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'warning' => array(
          'description' => "Timestamp for when the warning was shown.",
          'type' => 'int',
        ),
        'blocked' => array(
          'description' => "Timestamp for when the user was blocked.",
          'type' => 'int',
        ),
        'unblocked' => array(
          'description' => "Timestamp for when the user was unblocked.",
          'type' => 'int',
        ),
      ),
      'primary key' => array('pid'),
      'foreign keys' => array(
        'password_policy' => array(
          'table' => 'password_policy',
          'columns' => array('pid' => 'pid'),
        ),
        'role' => array(
          'table' => 'role',
          'columns' => array('rid' => 'rid'),
        ),
      ),
      'indexes' => array('uid' => array('uid')),
    ),
    'password_policy_force_change' => array(
      'description' => 'Forced password reset status.',
      'fields' => array(
        'uid' => array(
          'type' => 'int',
          'not null' => TRUE,
        ),
        'force_change' => array(
          'type' => 'int',
          'default' => 0,
        ),
      ),
      'foreign keys' => array(
        'user' => array(
          'table' => 'users',
          'columns' => array('uid' => 'uid'),
        ),
      ),
      'indexes' => array('uid' => array('uid')),
    ),
    'password_policy_role' => array(
      'description' => "Links policies with roles.",
      'fields' => array(
        'pid' => array(
          'description' => "Policy ID.",
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'rid' => array(
          'description' => "Role ID.",
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
      ),
      'foreign keys' => array(
        'password_policy' => array(
          'table' => 'password_policy',
          'columns' => array('pid' => 'pid'),
        ),
        'role' => array(
          'table' => 'role',
          'columns' => array('rid' => 'rid'),
        ),
      ),
      'primary key' => array('rid', 'pid'),
    ),
  );
}

/**
 * Implements hook_enable().
 */
function password_policy_enable() {
  drupal_set_message(t('Password policy module successfully installed. Please review the available <a href="@settings">configuration settings</a>.', array('@settings' => url('admin/config/people/password_policy'))));
}

/**
 * Implements hook_install().
 */
function password_policy_install() {
  db_query('INSERT INTO {password_policy_force_change} (uid) SELECT DISTINCT uid FROM {users} WHERE uid > 0');
}

/**
 * Implements hook_uninstall().
 */
function password_policy_uninstall() {
  variable_del('password_policy_admin');
  variable_del('password_policy_begin');
  variable_del('password_policy_block');
  variable_del('password_policy_show_restrictions');
  variable_del('password_policy_warning_subject');
  variable_del('password_policy_warning_body');
  variable_del('password_policy_new_login_change');
  variable_del('password_policy_force_change_reset');
}

/**
 * Remove unused 'name' column from {password_policy_role}.
 */
function password_policy_update_7000() {
  db_drop_field('password_policy_role', 'name');
  db_drop_unique_key('password_policy_role', 'name');
}

/**
 * Notify of change to username constraint behavior.
 */
function password_policy_update_7100() {
  return t('The username constraint has changed to disallow passwords containing the username in addition to passwords matching the username.');
}

/**
 * Update schema left unchanged from D6 -> D7 migration.
 */
function password_policy_update_7101() {
  db_change_field('password_policy', 'expiration', 'expiration', array(
      'description' => t("The passwords will expire after this number of days."),
      'type' => 'int',
      'default' => 0,
    ),
    array()
  );
  db_change_field('password_policy_history', 'pass', 'pass', array(
      'description' => "User's password (hashed).",
      'type' => 'varchar',
      'length' => 128,
      'not null' => TRUE,
      'default' => '',
    ),
    array()
  );
}

/**
 * Convert any D6 password hashes in history to D7 format.
 *
 * This may be a lengthy process, and is performed batch-wise.
 *
 * Code mostly copied from user_update_7000(), which updates user password
 * hashes upon D6 -> D7 migration.
 *
 * @see user_update_7000()
 */
function password_policy_update_7102(&$sandbox) {
  // Ignore Coder warning to minimize differences versus user_update_7000().
  // @ignore sniffer_commenting_inlinecomment_spacingbefore:function
  $sandbox['#finished'] = 0;
  // Multi-part update.
  if (!isset($sandbox['password_from'])) {
    $sandbox['password_from'] = 0;
    $sandbox['password_count'] = db_query("SELECT COUNT(pid) FROM {password_policy_history}")->fetchField();
  }
  else {
    require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
    //  Hash again all current hashed passwords.
    $has_rows = FALSE;
    // Update this many per page load.
    $count = 1000;
    $result = db_query_range("SELECT pid, pass FROM {password_policy_history} ORDER BY pid", $sandbox['password_from'], $count);
    foreach ($result as $row) {
      $has_rows = TRUE;

      // If the $row->pass value is not a MD5 hash (a 32 character
      // hexadecimal string) then skip it.
      if (!preg_match('/^[0-9a-f]{32}$/', $row->pass)) {
        continue;
      }

      $new_hash = user_hash_password($row->pass);
      if ($new_hash) {
        // Indicate an updated password.
        $new_hash  = 'U' . $new_hash;
        db_update('password_policy_history')
          ->fields(array('pass' => $new_hash))
          ->condition('pid', $row->pid)
          ->execute();
      }
    }
    $sandbox['#finished'] = $sandbox['password_count'] == 0 ? 1 : $sandbox['password_from'] / $sandbox['password_count'];

    $sandbox['password_from'] += $count;
    if (!$has_rows) {
      $sandbox['#finished'] = 1;
      return t('User passwords in Password Policy history rehashed to improve security');
    }
  }
}
