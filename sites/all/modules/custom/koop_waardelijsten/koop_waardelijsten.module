<?php
require_once('includes/koop_waardelijsten.xml_to_array.inc');


function koop_waardelijsten_menu() {
  $items['service/waardelijsten'] = array(
    'page callback' => 'koop_waardelijsten_service',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['service/waardelijsten/%'] = array(
    'page callback' => 'koop_waardelijsten_service_vocabulary',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/structure/taxonomy/import'] = array(
    'title' => 'Taxonomy import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('koop_waardelijsten_import_form'),
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/import.inc',
  );

  return $items;
}


function koop_waardelijsten_service() {
  $variables = array(
    'items' => array(),
    'title' => 'Waardelijsten',
    'type' => 'ul',
    'attributes' => array(),
  );

  foreach(taxonomy_vocabulary_get_names() as $vocabulary) {
    $variables['items'][] = l($vocabulary->name, 'service/waardelijsten/' . $vocabulary->machine_name);
  }

  echo theme_item_list($variables);
}


function koop_waardelijsten_service_vocabulary($vocabulary) {
  $voc = taxonomy_vocabulary_machine_name_load($vocabulary);
  if (!empty($voc->vid)) {
    $tree = taxonomy_get_nested_tree($voc->vid);
    echo drupal_json_encode(taxonomy_nested_tree_render($tree));
  }

  exit;
}


function taxonomy_get_nested_tree($vid_or_terms = array(), $max_depth = NULL, $parent = 0, $parents_index = array(), $depth = 0) {
  if (!is_array($vid_or_terms)) {
    $vid_or_terms = taxonomy_get_tree($vid_or_terms, 0, NULL, TRUE);
  }

  $return = array();
  foreach ($vid_or_terms as $term) {
    foreach ($term->parents as $term_parent) {
      if ($term_parent == $parent) {
        $return[$term->tid] = $term;
      }
      else {
        $parents_index[$term_parent][$term->tid] = $term;
      }
    }
  }

  foreach ($return as &$term) {
    if (isset($parents_index[$term->tid]) && (is_null($max_depth) || $depth < $max_depth)) {
      $term->children = taxonomy_get_nested_tree($parents_index[$term->tid], $max_depth, $term->tid, $parents_index, $depth + 1);
    }
  }

  return $return;
}


function taxonomy_nested_tree_render($tree) {
  $items = array();

  if (count($tree)) {
    foreach ($tree as $term) {
      $term = (array) $term;

      $item = array(
        'name' => $term['name'],
        'description' => $term['description'],
      );

      // @todo: Legacy code is such a beautiful thing
      if (isset($term['field_uri'][LANGUAGE_NONE][0]['value']) && !empty($term['field_uri'][LANGUAGE_NONE][0]['value'])) {
        $item['uri'] = $term['field_uri'][LANGUAGE_NONE][0]['value'];
      }
      else {
        $item['uri'] = strip_tags(str_replace(array("\n", "\r\n", "\r"), '', $term['description']));
      }
      unset($term['field_uri']);

      foreach($term as $k => $v) {
        if(substr($k, 0, 6) === 'field_') {
          $item[$k] = (isset($v[LANGUAGE_NONE][0]['value']) ? $v[LANGUAGE_NONE][0]['value'] : NULL);
        }
      }

      if (isset($term['children'])) {
        $item["children"] = taxonomy_nested_tree_render($term['children']);
      }
      $items[] = $item;
    }
  }

  return $items;
}